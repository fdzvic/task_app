// Mocks generated by Mockito 5.4.4 from annotations
// in taks_app/test/task_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:taks_app/features/tasks/domain/entities/task.dart' as _i5;
import 'package:taks_app/features/tasks/domain/repositories/task_repository.dart'
    as _i2;
import 'package:taks_app/features/tasks/domain/use_cases/add_task.dart' as _i6;
import 'package:taks_app/features/tasks/domain/use_cases/complete_task.dart'
    as _i8;
import 'package:taks_app/features/tasks/domain/use_cases/delete_task.dart'
    as _i7;
import 'package:taks_app/features/tasks/domain/use_cases/get_tasks.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTaskRepository_0 extends _i1.SmartFake
    implements _i2.TaskRepository {
  _FakeTaskRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetTasks].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTasks extends _i1.Mock implements _i3.GetTasks {
  MockGetTasks() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TaskRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeTaskRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.TaskRepository);

  @override
  _i4.Future<List<_i5.Task>> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i4.Future<List<_i5.Task>>.value(<_i5.Task>[]),
      ) as _i4.Future<List<_i5.Task>>);
}

/// A class which mocks [AddTask].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddTask extends _i1.Mock implements _i6.AddTask {
  MockAddTask() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TaskRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeTaskRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.TaskRepository);

  @override
  _i4.Future<void> call(_i5.Task? task) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [task],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [DeleteTask].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteTask extends _i1.Mock implements _i7.DeleteTask {
  MockDeleteTask() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TaskRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeTaskRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.TaskRepository);

  @override
  _i4.Future<void> call(String? taskId) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [taskId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [CompleteTask].
///
/// See the documentation for Mockito's code generation for more information.
class MockCompleteTask extends _i1.Mock implements _i8.CompleteTask {
  MockCompleteTask() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TaskRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeTaskRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.TaskRepository);

  @override
  _i4.Future<void> call(String? taskId) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [taskId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
